currentBuild.displayName = "nginx-with-host-info: #" + currentBuild.number

pipeline {
    agent any

    environment {
        DOCKER_PATH = "/Applications/Docker.app/Contents/Resources/bin/docker"
        DOCKER_IMAGE_NAME = 'host-info-img'
        DOCKER_IMAGE_TAG = 'latest'
        HOST_PORT = 8041
        CONTAINER_PORT = 80
        CONTAINER_NAME = 'c3'
        SEARCH_VALUE = 'abcdefgh'
    }

    stages {
        stage('Remove Existing Containers') {
            steps {
                script {
                    try {
                        echo "Containers removed successfully"
                    } catch (Exception e) {
                        echo "No running containers to remove"
                    }
                }
            }
        }

        stage('Build and Test') {
            steps {
                script {
                    sh "${DOCKER_PATH} --version"
                    sh "${DOCKER_PATH} build . -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                }
                script {
                    sh "${DOCKER_PATH} run -itd -p ${HOST_PORT}:${CONTAINER_PORT} -v /etc/localtime:/etc/localtime:ro --name ${CONTAINER_NAME} ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                }
            }
        }
    }

    post {
        always {
            script {
               printLineContainingSearchValue(env.SEARCH_VALUE.toLowerCase())
               markBuildMilestone("BuildCompleted", 1)
            }
        }
    }
}

def printLineContainingSearchValue(searchValue) {
    def targetLine = getLineContainingValueFromConsoleLog(searchValue)
    if (targetLine != null) {
        echo "Line containing '${searchValue}': ${targetLine}"
        return targetLine
    } else {
        echo "No line found containing '${env.SEARCH_VALUE}'"
        return null
    }
}

def getLineContainingValueFromConsoleLog(name) {
    def build = currentBuild.rawBuild
    def consoleLog = build.getLog().readLines()
                
    for (String line : consoleLog) {
        if (line.toLowerCase().contains(name)) {
            return line
        }
    }
    
    return null
}

def markBuildMilestone(String milestoneName, int milestoneOrdinal) {
    milestone ordinal: milestoneOrdinal
}
